C00B 000		jmp 	start 	skip around the variables
0000 001 i 		dw 	 			int i (iterator)
0004 002 s 		dw				int s (size of array) hardcode
0000 003 m 		dw 	 			int m (max number)
0000 004 t 		dw				int t (temp)
0023 005 a 		dw 				int a[]
0001 006 one 	dw 				1
3000 007 l		dw 				load number in array
0000 008 zero	dw				0					
0000 009						leave space for changes
0000 00A
3008 00B start	load	zero	i=0
4001 00C 		store	i 		i=0
3002 00D loop	load 	s 		load size if ( i >= s) goto xit
6001 00E		sub		i 		check if i is greater than or equal to size
D020 00F		jumpe	xit		jump to xit if accumulator is zero
E020 010		jumpl	xit		jump to xit if accumulator less than zero 	
3007 011		load 	l 		get address of a[i]
5005 012		add  	a 		add a to l
5001 013		add  	i 		add i to (l+a)
4015 014		store 	doit	plant the instruction into the program 
0000 015 doit	dw				address of a[i]
4004 016		store	t 		store a[i] as temporary
6003 017		sub		m 		subtract max from a[i]
D01C 018		jumpe	end		jump to end if accumulator is zero (max == a[i])
E01C 019		jumpl	end 	jump to end if accumulator less than zero (max > a[i])
3004 01A		load	doit	load a[i]
4003 01B		store	m 		store as new max
3001 01C end	load	i 		load i
5006 01D		add 	one		increment counter
4001 01E		store	i 		store new i
C00D 01F		jmp 	loop	jump to loop
3003 020 xit	load	m 		load max value
1800 021 		printH			print max value
0000 022 halt
0001 023 a[0]	dw				a[0] = 1
0003 024 a[1]	dw				a[1] = 3
0002 025 a[2]	dw				a[2] = 2
0007 026 a[3]	dw				a[3] = 7